typedef char* iterated_t;
typedef struct Element        Element;
typedef struct ParsingElement ParsingElement;
typedef struct ParsingResult  ParsingResult;
typedef struct ParsingStats   ParsingStats;
typedef struct ParsingContext ParsingContext;
typedef struct Match Match;
typedef struct Grammar Grammar;
typedef struct TokenMatchGroup TokenMatchGroup;
typedef bool (*ConditionCallback)(ParsingElement*, ParsingContext*);
typedef void (*ProcedureCallback)(ParsingElement* this, ParsingContext* context);
typedef void (*ContextCallback)(ParsingContext* context, char op );
typedef int (*ElementWalkingCallback)(Element* this, int step, void* context);
typedef int (*MatchWalkingCallback)(Match* this, int step, void* context);
typedef struct Element {
	char           type;       // Type is used du differentiate ParsingElement from Reference
	int            id;         // The ID, assigned by the grammar, as the relative distance to the axiom
	char*          name;       // The name of the element
} Element;
int Element_walk( Element* this, ElementWalkingCallback callback, void* context);
int Element__walk( Element* this, ElementWalkingCallback callback, int step, void* context);
typedef struct Reference {
	char            type;            // Set to Reference_T, to disambiguate with ParsingElement
	int             id;              // The ID, assigned by the grammar, as the relative distance to the axiom
	char*           name;            // The name of the reference (optional)
	char            cardinality;     // Either ONE (default), OPTIONAL, MANY or MANY_OPTIONAL
	struct ParsingElement* element;  // The reference to the parsing element
	struct Reference*      next;     // The next child reference in the parsing elements
} Reference;
bool Reference_Is(void* this);
bool Reference_IsMany(void* this);
Reference* Reference_Ensure(void* elementOrReference);
Reference* Reference_FromElement(ParsingElement* element);
Reference* Reference_new(void);
void Reference_free(Reference* this);
Reference* Reference_cardinality(Reference* this, char cardinality);
Reference* Reference_name(Reference* this, const char* name);
bool Reference_hasNext(Reference* this);
bool Reference_hasElement(Reference* this);
bool Reference_isMany(Reference* this);
int Reference__walk( Reference* this, ElementWalkingCallback callback, int step, void* nothing );
Match* Reference_recognize(Reference* this, ParsingContext* context);
typedef struct Match {
	char            status;     // The status of the match (see STATUS_XXX)
	size_t          offset;     // The offset of `char` matched
	size_t          length;     // The number of `char` matched
	size_t          line;       // The line number for the match
	Element*        element;
	void*           data;      // The matched data (usually a subset of the input stream)
	struct Match*   next;      // A pointer to the next  match (see `References`)
	struct Match*   children;  // A pointer to the child match (see `References`)
	struct Match*   parent;    // A pointer to the parent match
	void*           result;    // A pointer to the result of the match
} Match;
Match* Match_Success(size_t length, ParsingElement* element, ParsingContext* context);
Match* Match_SuccessFromReference(size_t length, Reference* element, ParsingContext* context);
Match* Match_new(void);
void* Match_free(Match* this);
void* Match_fail(Match* this);
bool Match_isSuccess(Match* this);
bool Match_hasNext(Match* this);
Match* Match_getNext(Match* this);
bool Match_hasChildren(Match* this);
Match* Match_getChildren(Match* this);
int Match_getOffset(Match* this);
int Match_getLength(Match* this);
int Match_getEndOffset(Match* this);
ParsingElement* Match_getParsingElement(Match* this);
int Match_getElementID(Match* this);
char Match_getType(Match* this);
char Match_getElementType(Match* this);
const char* Match_getElementName(Match* this);
int Match__walk(Match* this, MatchWalkingCallback callback, int step, void* context );
int Match_countAll(Match* this);
int Match_countChildren(Match* this);
void Match__writeJSON(Match* match, int fd, int flags);
void Match_writeJSON(Match* this, int fd);
void Match_printJSON(Match* this);
void Match__writeXML(Match* match, int fd, int flags);
void Match_writeXML(Match* this, int fd);
void Match_printXML(Match* this);
typedef struct Iterator {
	char           status;    // The status of the iterator, one of STATUS_{INIT|PROCESSING|INPUT_ENDED|ENDED}
	char*          buffer;    // The buffer to the read data, note how it is a (char*) and not an `char`
	char*    current;   // The pointer current offset within the buffer
	char     separator; // The character for line separator, `\n` by default.
	size_t         offset;    // Offset in input (in bytes), might be different from `current - buffer` if some input was freed.
	size_t         lines;     // Counter for lines that have been encountered
	size_t         capacity;  // Content capacity (in bytes), might be bigger than the data acquired from the input
	size_t         available; // Available data in buffer (in bytes), always `<= capacity`
	bool           freeBuffer;
	void*          input;     // Pointer to the input source (opaque structure)
	void           (*freeInput) (void*);
	bool          (*move) (struct Iterator*, int n); // Plug-in function to move to the previous/next positions
} Iterator;
Iterator* Iterator_Open(const char* path);
Iterator* Iterator_FromString(const char* text);
Iterator* Iterator_new(void);
void      Iterator_free(Iterator* this);
bool Iterator_open( Iterator* this, const char* path );
bool Iterator_hasMore( Iterator* this );
size_t Iterator_remaining( Iterator* this );
bool Iterator_moveTo ( Iterator* this, size_t offset );
bool Iterator_backtrack ( Iterator* this, size_t offset, size_t lines );
char Iterator_charAt ( Iterator* this, size_t offset );
typedef struct ParsingContext {
	struct Grammar*         grammar;      // The grammar used to parse
	struct Iterator*        iterator;     // Iterator on the input data
	struct ParsingStats*    stats;
	struct ParsingVariable* variables;
	size_t                  lastMatchOffset;    // The last deepest successful match, useful for displaying error
	size_t                  lastMatchLength;    // The last deepest successful match, useful for displaying error
	int                     lastMatchElementID; // The last deepest successful match, useful for displaying error
	ContextCallback         callback;
	int                     depth;
	const char*             indent;
	int                     flags;
	bool                    freeIterator;
} ParsingContext;
ParsingContext* ParsingContext_new( Grammar* g, Iterator* iterator );
char* ParsingContext_text( ParsingContext* this );
char ParsingContext_charAt ( ParsingContext* this, size_t offset );
size_t ParsingContext_getOffset( ParsingContext* this );
void ParsingContext_free( ParsingContext* this );
void ParsingContext_push ( ParsingContext* this );
void ParsingContext_pop ( ParsingContext* this );
void*  ParsingContext_get(ParsingContext*  this, const char* name);
int  ParsingContext_getInt(ParsingContext*  this, const char* name);
void  ParsingContext_set(ParsingContext*  this, const char* name, void* value);
void  ParsingContext_setInt(ParsingContext*  this, const char* name, int value);
void ParsingContext_on(ParsingContext* this, ContextCallback callback);
int  ParsingContext_getVariableCount(ParsingContext* this);
Match* ParsingContext_registerMatch(ParsingContext* this, Element* e, Match* m);
typedef struct ParsingElement {
	char           type;       // Type is used du differentiate ParsingElement from Reference
	int            id;         // The ID, assigned by the grammar, as the relative distance to the axiom
	char*          name;       // The parsing element's name
	void*          config;     // The configuration of the parsing element
	struct Reference*     children;   // The parsing element's children, if any
	struct Match*         (*recognize) (struct ParsingElement*, ParsingContext*);
	struct Match*         (*process)   (struct ParsingElement*, ParsingContext*, Match*);
	void                  (*freeMatch) (Match*);
} ParsingElement;
bool         ParsingElement_Is(void* this);
ParsingElement* ParsingElement_new(Reference* children[]);
void ParsingElement_freeChildren(ParsingElement* this);
void ParsingElement_free(ParsingElement* this);
ParsingElement* ParsingElement_Ensure(void* referenceOfElement);
ParsingElement* ParsingElement_insert(ParsingElement* this, int index, Reference* child);
ParsingElement* ParsingElement_replace(ParsingElement* this, int index, Reference* child);
ParsingElement* ParsingElement_add(ParsingElement* this, Reference* child);
ParsingElement* ParsingElement_clear(ParsingElement* this);
size_t ParsingElement_skip(ParsingElement* this, ParsingContext* context);
Match* ParsingElement_process( ParsingElement* this, Match* match );
ParsingElement* ParsingElement_name( ParsingElement* this, const char* name );
const char* ParsingElement_getName( ParsingElement* this );
int ParsingElement_walk( ParsingElement* this, ElementWalkingCallback callback, void* context);
int ParsingElement__walk( ParsingElement* this, ElementWalkingCallback callback, int step, void* context);
ParsingElement* Word_new(const char* word);
ParsingElement* Group_new(Reference* children[]);
ParsingElement* Rule_new(Reference* children[]);
ParsingElement* Procedure_new(ProcedureCallback c);
ParsingElement* Condition_new(ConditionCallback c);
typedef struct ParsingResult {
	char            status;
	Match*          match;
	ParsingContext* context;
} ParsingResult;
ParsingResult* ParsingResult_new(Match* match, ParsingContext* context);
void ParsingResult_free(ParsingResult* this);
bool ParsingResult_isSuccess(ParsingResult* this);
bool ParsingResult_isFailure(ParsingResult* this);
bool ParsingResult_isPartial(ParsingResult* this);
char* ParsingResult_text(ParsingResult* this);
int ParsingResult_textOffset(ParsingResult* this);
size_t ParsingResult_remaining(ParsingResult* this);
typedef struct ParsingStats {
	size_t   bytesRead;
	double   parseTime;
	size_t   symbolsCount;
	size_t*  successBySymbol;
	size_t*  failureBySymbol;
	size_t   failureOffset;   // A reference to the deepest failure
	size_t   matchOffset;
	size_t   matchLength;
	Element* failureElement;  // A reference to the failure element
} ParsingStats;
ParsingStats* ParsingStats_new(void);
void ParsingStats_free(ParsingStats* this);
void ParsingStats_setSymbolsCount(ParsingStats* this, size_t t);
Match* ParsingStats_registerMatch(ParsingStats* this, Element* e, Match* m);
typedef struct WordConfig {
	char*   word;
	size_t  length;
} WordConfig;
void Word_free(ParsingElement* this);
Match*          Word_recognize(ParsingElement* this, ParsingContext* context);
const char* Word_word(ParsingElement* this);
const char* WordMatch_group(Match* match);
typedef struct TokenMatch {
	int             count;
	const char**    groups;
} TokenMatch;
ParsingElement* Token_new(const char* expr);
void Token_free(ParsingElement*);
Match* Token_recognize(ParsingElement* this, ParsingContext* context);
const char* Token_expr(ParsingElement* this);
void TokenMatch_free(Match* match);
const char* TokenMatch_group(Match* match, int index);
int TokenMatch_count(Match* match);
Match*          Group_recognize(ParsingElement* this, ParsingContext* context);
Match*          Rule_recognize(ParsingElement* this, ParsingContext* context);
Match*          Procedure_recognize(ParsingElement* this, ParsingContext* context);
Match*          Condition_recognize(ParsingElement* this, ParsingContext* context);
typedef struct Grammar {
	ParsingElement*  axiom;       // The axiom
	ParsingElement*  skip;        // The skipped element
	int              axiomCount;  // The count of parsing elemetns in axiom
	int              skipCount;   // The count of parsing elements in skip
	Element**        elements;    // The set of all elements in the grammar
	bool             isVerbose;
} Grammar;
Grammar* Grammar_new(void);
void Grammar_free(Grammar* this);
void Grammar_prepare ( Grammar* this );
void Grammar_setVerbose ( Grammar* this );
void Grammar_setSilent ( Grammar* this );
int Grammar_symbolsCount ( Grammar* this );
ParsingResult* Grammar_parseIterator( Grammar* this, Iterator* iterator );
ParsingResult* Grammar_parsePath( Grammar* this, const char* path );
ParsingResult* Grammar_parseString( Grammar* this, const char* text );
void Grammar_freeElements(Grammar* this);
